// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Participant {
  id              String             @id @default(uuid())
  uid             String             @unique
  rollNo          String?
  universityEmail String             @unique
  isKiitStudent   Boolean
  imageUrl        String?
  fcmToken        String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  detail          ParticipantDetail?
  leaderOfTeams   Team[]
  teams           TeamMember[]
  favoriteEvents  FavoriteEvent[]
}

model ParticipantDetail {
  id             String      @id @default(uuid())
  firstname      String
  lastname       String
  branch         String
  phoneNumber    String
  countryCode    String
  whatsappNumber String
  studyYear      Int
  personalEmail  String?
  participant    Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId  String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Society {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  phoneNumber String
  websiteUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @default(SOCIETY)
  events      Event[]
}

model Event {
  id                          String          @id @default(uuid())
  paid                        Boolean
  images                      Image[]
  paymentQrUrl                String?
  name                        String
  society                     Society         @relation(fields: [societyId], references: [id], onDelete: Cascade)
  societyId                   String
  about                       String
  websiteUrl                  String?
  emails                      String[]
  guidlines                   String[]
  phoneNumbers                String[]
  registrationUrl             String?
  price                       Int             @default(0)
  from                        DateTime
  to                          DateTime
  deadline                    DateTime
  maxTeamSize                 Int             @default(1)
  isOutsideParticipantAllowed Boolean         @default(false)
  tags                        String[]
  teamCount                   Int             @default(0)
  transcript                  String?
  isApproved                  Boolean         @default(false)
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  teams                       Team[]
  favoriteBy                  FavoriteEvent[]
  details                     EventDetail[]
}

model Image {
  url       String
  key       String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([url, key])
}

model EventDetail {
  id        String    @id @default(uuid())
  name      String
  from      DateTime
  to        DateTime
  type      EventType
  venueId   String?
  venue     Venue?    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  about     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Venue {
  id           String        @id @default(uuid())
  mapUrl       String
  name         String
  eventDetails EventDetail[]
}

model Team {
  id             String        @id @default(uuid())
  name           String
  leaderId       String
  leader         Participant   @relation(fields: [leaderId], references: [id], onDelete: Cascade)
  eventId        String
  event          Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  members        TeamMember[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  payment_status PaymentStatus @default(UNPAID)
  paymentId      String?
}

enum PaymentStatus {
  UNPAID
  UNDER_VERIFICATION
  VERIFIED
}

model TeamMember {
  teamId        String
  team          Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([teamId, participantId])
}

model FavoriteEvent {
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  eventId       String
  event         Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([participantId, eventId])
}

enum EventType {
  ONLINE
  OFFLINE
}

enum Role {
  ADMIN
  SOCIETY
}
