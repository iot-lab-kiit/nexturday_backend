// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Participant {
  id              String             @id @default(uuid())
  uid             String             @unique
  rollNo          String
  branch          String
  name            String
  email           String             @unique
  phoneNumber     String
  whatsappNumber  String
  studyYear       Int
  imageUrl        String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  attemptedEvents EventParticipant[]
  favoriteEvents  FavoriteEvent[]
}

model Society {
  id          String   @id @default(uuid())
  uid         String   @unique
  name        String
  email       String
  password    String
  phoneNumber String
  websiteUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
}

model Event {
  id                 String             @id @default(uuid())
  paid               Boolean
  images             String[]
  name               String
  society            Society            @relation(fields: [societyId], references: [id], onDelete: Cascade)
  societyId          String
  about              String
  websiteUrl         String?
  emails             String[]
  guidlines          String[]
  phoneNumbers       String[]
  registrationUrl    String?
  price              Int                @default(0)
  from               DateTime
  to                 DateTime
  participationCount Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  participants       EventParticipant[]
  favoriteBy         FavoriteEvent[]
  details            EventDetail[]
}

model EventDetail {
  id        String    @id @default(uuid())
  name      String
  from      DateTime
  to        DateTime
  type      EventType
  venueId   String?
  venue     Venue?    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  about     String
  images    String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Venue {
  id           String        @id @default(uuid())
  mapUrl       String
  name         String
  eventDetails EventDetail[]
}

model EventParticipant {
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  eventId       String
  event         Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([participantId, eventId])
}

model FavoriteEvent {
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  eventId       String
  event         Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([participantId, eventId])
}

enum EventType {
  ONLINE
  OFFLINE
}
